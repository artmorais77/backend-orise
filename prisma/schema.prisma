generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  dinheiro
  pix
  debito
  credito
}

enum TypeMovement {
  entrada
  saida
}

model User {
  id String @id @default(uuid())
  name String
  email String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  sale Sale[]
  cashMovement CashMovement[]

  cashOpened CashRegister[] @relation("cashOpened")
  cashClosed CashRegister[] @relation("cashClosed")

  @@unique([email])
  @@map("users")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  category String
  price Decimal
  isActive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  saleItem SaleItem[]

  @@map("products")
}

model Sale {
  id Int @id @default(autoincrement())
  code Int 
  cashRegisterId Int
  userId String
  total Decimal
  paymentType PaymentType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  saleItem SaleItem[]
  cashMovement CashMovement[]

  user User @relation(fields: [userId], references: [id])
  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id])

  @@map("sales")
}

model SaleItem {
  id Int @id @default(autoincrement())
  saleId Int
  productId Int
  quantity Int
  price Decimal
  subtotal Decimal

  sale Sale @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_item")
}

model CashRegister {
  id Int @id @default(autoincrement())
  openedAt DateTime @default(now())
  isOpen Boolean
  initialAmount Decimal
  finalAmount Decimal?
  openedById String
  closedById String?

  sale Sale[]
  cashRegisterCounter CashRegisterCounter?
  cashMovement CashMovement[]

  openedBy User @relation("cashOpened", fields: [openedById], references: [id])
  closedBy User? @relation("cashClosed", fields: [closedById], references: [id])

  @@map("cash_register")  
}

model CashRegisterCounter {
  id Int @id @default(autoincrement())
  counter Int
  cashRegisterId Int @unique

  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id])

  @@map("cash_register_counter")
}

model CashMovement {
  id Int @id @default(autoincrement())
  cashRegisterId Int
  userId String
  saleId Int?
  type TypeMovement
  description String
  amount Decimal
  paymentType PaymentType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id])
  sale Sale? @relation(fields: [saleId], references: [id])
  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id])

  @@map("cash_movement")
}