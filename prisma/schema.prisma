generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  dinheiro
  pix
  debito
  credito
}

enum TypeMovement {
  entrada
  saida
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  products Product[]
  sales Sale[]
  cashMovements CashMovement[]
  cashOpened CashRegister[] @relation("cashOpened")
  cashClosed CashRegister[] @relation("cashClosed")

  @@map("users")
}

model Product {
  id String @id @default(uuid())
  code Int
  name String
  category String
  price Decimal
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  userId String

  saleItems SaleItem[]
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, code])
  @@map("products")
}

model Sale {
  id String @id @default(uuid())
  code Int
  userId String
  cashRegisterId String
  total Decimal
  paymentType PaymentType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  saleItems SaleItem[]
  cashMovements CashMovement[]

  user User @relation(fields: [userId], references: [id])
  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id])

  @@unique([userId, code])
  @@map("sales")
}

model SaleItem {
  id String @id @default(uuid())
  saleId String
  productId String
  quantity Int
  price Decimal
  subtotal Decimal

  sale Sale @relation(fields: [saleId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_item")
}

model CashRegister {
  id String @id @default(uuid())
  code Int
  openedAt DateTime @default(now())
  isOpen Boolean
  initialAmount Decimal
  finalAmount Decimal?
  openedById String
  closedById String?

  sales Sale[]
  cashMovements CashMovement[]

  openedBy User @relation("cashOpened", fields: [openedById], references: [id])
  closedBy User? @relation("cashClosed", fields: [closedById], references: [id])

  @@unique([openedById, code])
  @@map("cash_register")
}

model CashMovement {
  id String @id @default(uuid())
  code Int
  cashRegisterId String
  userId String
  saleId String?
  type TypeMovement
  description String
  amount Decimal
  paymentType PaymentType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id])
  sale Sale? @relation(fields: [saleId], references: [id])
  cashRegister CashRegister @relation(fields: [cashRegisterId], references: [id])

  @@unique([userId, code])
  @@map("cash_movement")
}

model Sequence {
  id String @id @default(uuid())
  userId String
  entity String  // "product", "sale", etc.
  lastCode Int @default(0)

  @@unique([userId, entity])
}